plugins {
	id 'java'
//	id 'idea'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
//	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.fufa'
version = '1.0-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

//ext {
//	set('snippetsDir', file("build/generated-snippets"))
//}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.7'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-core'

	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation platform('org.junit:junit-bom:5.9.1')
	testImplementation 'org.junit.jupiter:junit-jupiter'
	implementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'



////	implementation 'org.springframework.boot:spring-boot-starter-jersey'
////	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
//	implementation 'org.springframework.boot:spring-boot-starter-web-services'
//	implementation 'org.springframework.data:spring-data-jpa'
//
////	developmentOnly 'org.springframework.boot:spring-boot-devtools'
////	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
}

test {
//	jvmArgs = ["-Duser.timezone=UTC", "-Duser.language=en"]
	useJUnitPlatform()
}

//tasks.named('test') {
//	outputs.dir snippetsDir
//	useJUnitPlatform()
//}

//tasks.named('asciidoctor') {
//	inputs.dir snippetsDir
//	dependsOn test
//}
